#include TODO:

<% each do |exp| %>
  <%
    if exp.kind_of?(Protobuf::Generate::Ast::Package)
      package exp.name
    elsif exp.kind_of?(Protobuf::Generate::Ast::Enum)
  %>
  int <%= namespaced_function exp.name, 'write', 'tag', 'with' %>(<%= namespaced_type exp.name %> *_pb, void *_buffer, int offset, int tag) {
      offset = write_raw_varint32((tag<<3)+0, _buffer, offset);
      offset = write_raw_varint32(*_pb, _buffer, offset);
      return offset;
  }

  <% elsif exp.kind_of?(Protobuf::Generate::Ast::Message) %>
  void <%= namespaced_function exp.name, 'clear' %>(<%= namespaced_type exp.name %> *_pb) {
    _memset(_pb, 0, sizeof(*_pb));
  }

  void <%= namespaced_function exp.name, 'init', 'optional', 'attributes' %>(<%= namespaced_type exp.name %> *_pb) {
    <% exp.fields.each do |field| %>
      <% if field.optional? %>
        <% if type_message?(field.type) %>
          <%= namespaced_function field.name, 'init', 'optional', 'attributes' %>(&_pb-><%= field.name %>);
        <% elsif type_enum?(field.type) %>
          // TODO: Optional enum.
        <% elsif field.type =~ /bool/ %>
          _pb-><%= field.name %> = <%= field.options.fetch(:default, 'false') %>;
        <% elsif field.type =~ /string|bytes/ %>
          _pb-><%= field.name %>.data = <%= field.options.fetch('default', '""') %>;
          _pb-><%= field.name %>.size = <%= field.options.fetch('default', '').bytesize %>;
        <% else %>
          _pb-><%= field.name %> = <%= field.options.fetch('default', 0) %>;
        <% end %>
      <% end %>
    <% end %>
  }

  bool <%= namespaced_function exp.name, 'is', 'default', 'message' %>(<%= namespaced_type exp.name %> _*pb) {
    return true
  }

  int <%= namespaced_function exp.name, 'encode' %>(const <%= namespaced_type exp.name %> *pb, const uint8_t *data, size_t data_size, size_t *encoded_size) {

  }

  int <%= namespaced_function exp.name, 'decode' %>(<%= namespaced_type exp.name %> *pb, const uint8_t *data, size_t data_size, size_t *encoded_size) {

  }
  <% end %>
<% end %>
