#include TODO:

<%
  each do |expression|
    if package = expression[:package]
      package package[:name]
    if enum = expression[:enum]
%>
  int <%= namespaced_function enum[:name], 'write', 'tag', 'with' %>(<%= namespaced_type enum[:name] %> *_pb, void *_buffer, int offset, int tag) {
      offset = write_raw_varint32((tag<<3)+0, _buffer, offset);
      offset = write_raw_varint32(*_pb, _buffer, offset);
      return offset;
  }

<% else if message = expression[:message] %>
  void <%= namespaced_function message[:name], 'clear' %>(<%= namespaced_type message[:name] %> *_pb) {
    _memset(_pb, 0, sizeof(*_pb));
  }

  void <%= namespaced_function message[:name], 'init', 'optional', 'attributes' %>(<%= namespaced_type message[:name] %> *_pb) {
    <% message[:fields].each do |field| %>
      <% if field[:label] == 'optional'
          case field[:type]
      %>
        <% when type_message? field[:type] %>
          <%= namespaced_function field[:name], 'init', 'optional', 'attributes' %>(&_pb-><%= field[:name] %>);
        <% when type_enum? field[:type] %>
          // TODO: Optional enum.
        <% when 'bool' %>
          _pb-><%= field[:name] %> = <%= (field[:options] || {})[:default] || 'false' %>;
        <% when 'string', 'bytes' %>
          _pb-><%= field[:name] %>.data = <%= field[:options] || {})[:default].to_s %>;
          _pb-><%= field[:name] %>.size = <%= field[:options] || {})[:default].to_s.bytesize %>;
        <% else %>
          _pb-><%= field[:name] %> = 0;
      <%
          end
        end
      %>
    <% end %>
  }

  bool <%= namespaced_function message[:name], 'is', 'default', 'message' %>(<%= namespaced_type message[:name] %> _*pb) {
    return true
  }

  int <%= namespaced_function message[:name], 'encode' %>(const <%= namespaced_type message[:name] %> *pb, const uint8_t *data, size_t data_size, size_t *encoded_size) {

  }

  int <%= namespaced_function message[:name], 'decode' %>(<%= namespaced_type message[:name] %> *pb, const uint8_t *data, size_t data_size, size_t *encoded_size) {

  }
<% end %>
