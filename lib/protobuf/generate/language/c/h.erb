#pragma once

#include <stdint.h>

#ifdef __cplusplus
  extern "C" {
#endif
<%
  each do |expression|
    if package = expression[:package]
      package package[:name]
    elsif enum = expression[:enum]
%>

  // <%# TODO: file_line enum[:name] %>
  typedef enum {
    <% enum[:fields].each do |field| %>
      <%= namespaced_constant enum[:name], field[:name] %> = <%= field[:tag] %>,
    <% end %>
  } <%= namespaced_type enum[:name] %>;
<%
    elsif message = expression[:message]
%>

  // <%# TODO: file_line message[:name] %>
  typedef struct <%= namespaced_type message[:name] %> {
    <% message[:fields].each do |field| %>
      <% case field[:type].to_s %>
        <% when type_message?(field[:type]) %>
          <%= namespaced_type field[:type] %> <%= field[:name] %>;
        <% when type_enum?(field[:type]) %>
          <%= namespaced_type field[:type] %> <%= field[:name] %>;
        <% when 'double' %>
          double <%= field[:name] %>;
        <% when 'float' %>
          float <%= field[:name] %>;
        <% when /int32|sint32|sfixed32/ %>
          int32_t <%= field[:name] %>;
        <% when /int64|sint64|sfixed64/ %>
          int64_t <%= field[:name] %>;
        <% when /uint32|fixed32/ %>
          uint32_t <%= field[:name] %>;
        <% when /uint64|fixed64/ %>
          uint64_t <%= field[:name] %>;
        <% when 'bool' %>
          bool <%= field[:name] %>;
        <% when 'string' %>
          struct {
            char   data[ <%= (field.fetch(:comment, [{options: []}])).inspect %> ];
            size_t size;
          } <%= field[:name] %>;
        <% when 'bytes' %>
          struct {
            uint8_t data[];
            size_t  size;
          } <%= field[:name] %>;
      <% end %>
    <% end %>
  } <%= namespaced_type message[:name] %>;

  // TODO: Replace int with an protobuf_(encode|decode)_t type.
  // TODO: Move encode_size into result type.
  int <%= namespaced_function message[:name], 'encode' %>(const <%= namespaced_type message[:name] %> *pb, const uint8_t *data, size_t data_size, size_t *encoded_size);
  int <%= namespaced_function message[:name], 'decode' %>(<%= namespaced_type message[:name] %> *pb, const uint8_t *data, size_t data_size, size_t *encoded_size);
<%
    end
  end
%>

#ifdef __cplusplus
  }
#endif
