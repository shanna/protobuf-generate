#pragma once

#include <stdint.h>

#ifdef __cplusplus
  extern "C" {
#endif
<%
  each do |exp|
    if exp.kind_of?(Protobuf::Generate::Ast::Package)
      package exp.name
    elsif exp.kind_of?(Protobuf::Generate::Ast::Enum)
%>

  typedef enum {
    <% exp.fields.each do |field| %>
      <%= namespaced_constant exp.name, field.name %> = <%= field.tag %>,
    <% end %>
  } <%= namespaced_type exp.name %>;
<%
    elsif exp.kind_of?(Protobuf::Generate::Ast::Message)
%>

  typedef struct <%= namespaced_type exp.name %> {
    <% exp.fields.each do |field| %>
      <% if type_message?(field.type) %>
        <%= namespaced_type field.type %> <%= field.name %>;
      <% elsif type_enum?(field.type) %>
        <%= namespaced_type field.type %> <%= field.name %>;
      <% elsif field.type =~ /double/ %>
        double <%= field.name %>;
      <% elsif field.type =~ /float/ %>
        float <%= field.name %>;
      <% elsif field.type =~ /int32|sint32|sfixed32/ %>
        int32_t <%= field.name %>;
      <% elsif field.type =~ /int64|sint64|sfixed64/ %>
        int64_t <%= field.name %>;
      <% elsif field.type =~ /uint32|fixed32/ %>
        uint32_t <%= field.name %>;
      <% elsif field.type =~ /uint64|fixed64/ %>
        uint64_t <%= field.name %>;
      <% elsif field.type =~ /bool/ %>
        bool <%= field.name %>;
      <% elsif field.type =~ /string/ %>
        struct {
          char   data[<%= field.meta["size_max"] %>];
          size_t size;
        } <%= field.name %>;
      <% elsif field.type =~ /bytes/ %>
        struct {
          uint8_t data[<%= field.meta["size_max"] %>];
          size_t  size;
        } <%= field.name %>;
      <% end %>
    <% end %>
  } <%= namespaced_type exp.name %>;

  // TODO: Replace int with an protobuf_(encode|decode)_t type.
  // TODO: Move encode_size into result type.
  int <%= namespaced_function exp.name, 'encode' %>(const <%= namespaced_type exp.name %> *pb, const uint8_t *data, size_t data_size, size_t *encoded_size);
  int <%= namespaced_function exp.name, 'decode' %>(<%= namespaced_type exp.name %> *pb, const uint8_t *data, size_t data_size, size_t *encoded_size);
<%
    end
  end
%>

#ifdef __cplusplus
  }
#endif
